"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.authRouter = void 0;
const express_1 = require("express");
const passwordValidation_1 = require("../middlewares/validation/users-middleware/passwordValidation");
const input_validation_middleware_1 = require("../middlewares/validation/input-validation-middleware");
const loginOrEmailValidation_1 = require("../middlewares/validation/auth-middleware/loginOrEmailValidation");
const morgan_middleware_1 = require("../middlewares/morgan-middleware");
const checkRequests_middleware_1 = require("../middlewares/auth/checkRequests-middleware");
const emailValidation_1 = require("../middlewares/validation/users-middleware/emailValidation");
const composition_root_1 = require("../composition-root");
const emailRegistrationValidation_1 = require("../middlewares/validation/users-middleware/emailRegistrationValidation");
const loginValidation_1 = require("../middlewares/validation/users-middleware/loginValidation");
const confirmEmail_1 = require("../middlewares/validation/auth-middleware/confirmEmail");
const emailResendingValidation_1 = require("../middlewares/validation/auth-middleware/emailResendingValidation");
const recoveryCodeValidation_1 = require("../middlewares/validation/auth-middleware/recoveryCodeValidation");
exports.authRouter = (0, express_1.Router)({});
const jwtMw = composition_root_1.jwtAuthMiddleware.use.bind(composition_root_1.jwtAuthMiddleware);
const refreshTokenMw = composition_root_1.refreshTokenMiddleware.use.bind(composition_root_1.refreshTokenMiddleware);
exports.authRouter.post("/login", checkRequests_middleware_1.checkRequests, loginOrEmailValidation_1.loginOrEmailValidation, passwordValidation_1.passwordValidation, input_validation_middleware_1.inputValidationMiddleware, (0, morgan_middleware_1.morgan)("tiny"), composition_root_1.authController.login.bind(composition_root_1.authController));
exports.authRouter.post("/registration", checkRequests_middleware_1.checkRequests, loginValidation_1.loginValidation, passwordValidation_1.passwordValidation, emailRegistrationValidation_1.emailRegistrationValidation, input_validation_middleware_1.inputValidationMiddleware, (0, morgan_middleware_1.morgan)("tiny"), composition_root_1.authController.register.bind(composition_root_1.authController));
exports.authRouter.post("/refresh-token", refreshTokenMw, composition_root_1.authController.refreshToken.bind(composition_root_1.authController));
exports.authRouter.post("/logout", refreshTokenMw, (0, morgan_middleware_1.morgan)("tiny"), composition_root_1.authController.logout.bind(composition_root_1.authController));
exports.authRouter.post("/registration-confirmation", checkRequests_middleware_1.checkRequests, confirmEmail_1.confirmEmail, input_validation_middleware_1.inputValidationMiddleware, (0, morgan_middleware_1.morgan)("tiny"), composition_root_1.authController.registrationConfirmation.bind(composition_root_1.authController));
exports.authRouter.post("/registration-email-resending", checkRequests_middleware_1.checkRequests, emailResendingValidation_1.emailResendingValidation, input_validation_middleware_1.inputValidationMiddleware, (0, morgan_middleware_1.morgan)("tiny"), composition_root_1.authController.registrationEmailResending.bind(composition_root_1.authController));
exports.authRouter.post("/password-recovery", checkRequests_middleware_1.checkRequests, emailValidation_1.emailValidation, input_validation_middleware_1.inputValidationMiddleware, composition_root_1.authController.passwordRecovery.bind(composition_root_1.authController));
exports.authRouter.post("/new-password", checkRequests_middleware_1.checkRequests, passwordValidation_1.newPasswordValidation, recoveryCodeValidation_1.confirmRecoveryCode, input_validation_middleware_1.inputValidationMiddleware, composition_root_1.authController.newPassword.bind(composition_root_1.authController));
exports.authRouter.get("/me", jwtMw, (0, morgan_middleware_1.morgan)("tiny"), composition_root_1.authController.me.bind(composition_root_1.authController));
