"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.authRouter = void 0;
const express_1 = require("express");
const passwordValidation_1 = require("../middlewares/validation/users-middleware/passwordValidation");
const input_validation_middleware_1 = require("../middlewares/validation/input-validation-middleware");
const loginOrEmailValidation_1 = require("../middlewares/validation/auth-middleware/loginOrEmailValidation");
const morgan_middleware_1 = require("../middlewares/morgan-middleware");
const checkRequests_middleware_1 = require("../middlewares/auth/checkRequests-middleware");
const emailValidation_1 = require("../middlewares/validation/users-middleware/emailValidation");
const composition_root_1 = require("../composition-root");
const AuthController_1 = require("../controllers/AuthController");
const jwt_auth_middleware_1 = require("../middlewares/auth/jwt-auth-middleware");
const refresh_token_middleware_1 = require("../middlewares/auth/refresh-token-middleware");
const confirmEmail_1 = require("../middlewares/validation/auth-middleware/confirmEmail");
const emailResendingValidation_1 = require("../middlewares/validation/auth-middleware/emailResendingValidation");
const recoveryCodeValidation_1 = require("../middlewares/validation/auth-middleware/recoveryCodeValidation");
const loginValidation_1 = require("../middlewares/validation/users-middleware/loginValidation");
const emailRegistrationValidation_1 = require("../middlewares/validation/users-middleware/emailRegistrationValidation");
exports.authRouter = (0, express_1.Router)({});
const authController = composition_root_1.container.resolve(AuthController_1.AuthController);
const jwtMw = composition_root_1.container.resolve(jwt_auth_middleware_1.JwtAuthMiddleware);
const refreshTokenMw = composition_root_1.container.resolve(refresh_token_middleware_1.RefreshTokenMiddleware);
const confirmEmail = composition_root_1.container.resolve(confirmEmail_1.ConfirmEmail);
const emailResendingValidation = composition_root_1.container.resolve(emailResendingValidation_1.EmailResendingValidation);
const confirmRecoveryCode = composition_root_1.container.resolve(recoveryCodeValidation_1.ConfirmRecoveryCode);
const loginValidation = composition_root_1.container.resolve(loginValidation_1.LoginValidation);
const emailRegistrationValidation = composition_root_1.container.resolve(emailRegistrationValidation_1.EmailRegistrationValidation);
exports.authRouter.post("/login", checkRequests_middleware_1.checkRequests, loginOrEmailValidation_1.loginOrEmailValidation, passwordValidation_1.passwordValidation, input_validation_middleware_1.inputValidationMiddleware, (0, morgan_middleware_1.morgan)("tiny"), authController.login.bind(authController));
exports.authRouter.post("/registration", checkRequests_middleware_1.checkRequests, loginValidation.loginValidation.bind(loginValidation), passwordValidation_1.passwordValidation, emailRegistrationValidation.emailRegistrationValidation.bind(emailRegistrationValidation), input_validation_middleware_1.inputValidationMiddleware, (0, morgan_middleware_1.morgan)("tiny"), authController.register.bind(authController));
exports.authRouter.post("/refresh-token", refreshTokenMw.use.bind(refreshTokenMw), authController.refreshToken.bind(authController));
exports.authRouter.post("/logout", refreshTokenMw.use.bind(refreshTokenMw), (0, morgan_middleware_1.morgan)("tiny"), authController.logout.bind(authController));
exports.authRouter.post("/registration-confirmation", checkRequests_middleware_1.checkRequests, confirmEmail.confirmEmail.bind(confirmEmail), input_validation_middleware_1.inputValidationMiddleware, (0, morgan_middleware_1.morgan)("tiny"), authController.registrationConfirmation.bind(authController));
exports.authRouter.post("/registration-email-resending", checkRequests_middleware_1.checkRequests, emailResendingValidation.emailResendingValidation.bind(emailResendingValidation), input_validation_middleware_1.inputValidationMiddleware, (0, morgan_middleware_1.morgan)("tiny"), authController.registrationEmailResending.bind(authController));
exports.authRouter.post("/password-recovery", checkRequests_middleware_1.checkRequests, emailValidation_1.emailValidation, input_validation_middleware_1.inputValidationMiddleware, authController.passwordRecovery.bind(authController));
exports.authRouter.post("/new-password", checkRequests_middleware_1.checkRequests, passwordValidation_1.newPasswordValidation, confirmRecoveryCode.confirmRecoveryCode.bind(confirmRecoveryCode), input_validation_middleware_1.inputValidationMiddleware, authController.newPassword.bind(authController));
exports.authRouter.get("/me", jwtMw.use.bind(jwtMw), (0, morgan_middleware_1.morgan)("tiny"), authController.me.bind(authController));
