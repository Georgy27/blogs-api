"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.authRouter = void 0;
const express_1 = require("express");
const passwordValidation_1 = require("../middlewares/validation/users-middleware/passwordValidation");
const input_validation_middleware_1 = require("../middlewares/validation/input-validation-middleware");
const loginOrEmailValidation_1 = require("../middlewares/validation/auth-middleware/loginOrEmailValidation");
const morgan_middleware_1 = require("../middlewares/morgan-middleware");
const checkRequests_middleware_1 = require("../middlewares/auth/checkRequests-middleware");
const emailValidation_1 = require("../middlewares/validation/users-middleware/emailValidation");
const composition_root_1 = require("../composition-root");
exports.authRouter = (0, express_1.Router)({});
const jwtMw = composition_root_1.jwtAuthMiddleware.use.bind(composition_root_1.jwtAuthMiddleware);
const confirmRecoveryMw = composition_root_1.confirmRecoveryCode.use.bind(composition_root_1.confirmRecoveryCode);
const confirmEmailMw = composition_root_1.confirmEmail.use.bind(composition_root_1.confirmEmail);
const refreshTokenMw = composition_root_1.refreshTokenMiddleware.use.bind(composition_root_1.refreshTokenMiddleware);
const loginValidationMw = composition_root_1.loginValidation.use.bind(composition_root_1.loginValidation);
const emailRegistrationValidationMw = composition_root_1.emailRegistrationValidation.use.bind(composition_root_1.emailRegistrationValidation);
const emailResendingValidationMw = composition_root_1.emailResendingValidation.use.bind(composition_root_1.emailResendingValidation);
exports.authRouter.post("/login", checkRequests_middleware_1.checkRequests, loginOrEmailValidation_1.loginOrEmailValidation, passwordValidation_1.passwordValidation, input_validation_middleware_1.inputValidationMiddleware, (0, morgan_middleware_1.morgan)("tiny"), composition_root_1.authController.login.bind(composition_root_1.authController));
exports.authRouter.post("/registration", checkRequests_middleware_1.checkRequests, loginValidationMw, passwordValidation_1.passwordValidation, emailRegistrationValidationMw, input_validation_middleware_1.inputValidationMiddleware, (0, morgan_middleware_1.morgan)("tiny"), composition_root_1.authController.register.bind(composition_root_1.authController));
exports.authRouter.post("/refresh-token", refreshTokenMw, composition_root_1.authController.refreshToken.bind(composition_root_1.authController));
exports.authRouter.post("/logout", refreshTokenMw, (0, morgan_middleware_1.morgan)("tiny"), composition_root_1.authController.logout.bind(composition_root_1.authController));
exports.authRouter.post("/registration-confirmation", checkRequests_middleware_1.checkRequests, confirmEmailMw, input_validation_middleware_1.inputValidationMiddleware, (0, morgan_middleware_1.morgan)("tiny"), composition_root_1.authController.registrationConfirmation.bind(composition_root_1.authController));
exports.authRouter.post("/registration-email-resending", checkRequests_middleware_1.checkRequests, emailResendingValidationMw, input_validation_middleware_1.inputValidationMiddleware, (0, morgan_middleware_1.morgan)("tiny"), composition_root_1.authController.registrationEmailResending.bind(composition_root_1.authController));
exports.authRouter.post("/password-recovery", checkRequests_middleware_1.checkRequests, emailValidation_1.emailValidation, input_validation_middleware_1.inputValidationMiddleware, composition_root_1.authController.passwordRecovery.bind(composition_root_1.authController));
exports.authRouter.post("/new-password", checkRequests_middleware_1.checkRequests, passwordValidation_1.newPasswordValidation, confirmRecoveryMw, input_validation_middleware_1.inputValidationMiddleware, composition_root_1.authController.newPassword.bind(composition_root_1.authController));
exports.authRouter.get("/me", jwtMw, (0, morgan_middleware_1.morgan)("tiny"), composition_root_1.authController.me.bind(composition_root_1.authController));
